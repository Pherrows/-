커밋 메세지 룰과 작성법
첫번째 라인 : 제목(필수)
두번째 라인 공란
세번쨰 라인부터 내용 작성 
마지막 라인 꼬리말 (이슈 넘버 선택)

작성팁 최대한 구체적으로 작성, 주간 보고에 그대로 쓸 정도로 작성

ctrl + shift + p 옵션창

왜굳이 git add -> commit 두단계에 걸쳐서 하는지
모든 파일을 굳이 기록할 필요가 없기 떄문
버전을 여러 개로 나눠서 만들고 싶은 경우
git add 로 기록할 파일을 고르고
git commit 으로 버전생성 (기록완료)

커밋 전에 diff(변경점) 확인하기 !!!
명령어 git diff , git difftool

언제 얼마나 commit 을 하는게 좋을까?
간단한 기능을 하나 추가할 떄 마다 commit 하면 됨

예를 들어 회원가입 기능을 만든다고 하면
-회원가입 폼 레이아웃 ui를 만들면 commit 하고
-입력한 이메일이 맞는지 검증한느 기능(유효성검사)을 만들었으면 commit 하고
-서버에 데이터를 전송하는 기능을 만들었으면 commit 하고

대충 이렇게 작은 작업 하나를 마칠때마다 commit 하는게 좋음
물론 3개 다 만들고 commit 해도됨
중요한건 하루 1개 이상 commit 할것(좋은습관)

CLI 명령어 기반(command line interface) vs git 비교
명령어는 모든 기능 사용가능한 반면 git 툴은 틀 자체에 구현된 기능만 쓸 수 있음

git push -u origin main
-u 옵션은 방금 입력한 주소를 기억해라
그다음 부터는 git push 만 입력해도 됨

git remote -v
원격 저장소 정보를 보고싶을떄

git clone https:// 

원격 저장소에 올린 프로젝트를 내로컬에 복제(1번만 하면 됨)

git pull origin (원격 저장소주소)
원격 저장소에 있는 모든 브랜치 내용을 가져와서 로컬 저장소에 합치라는 뜻

git pull origin main
특정 브랜치(main)만 가져올 수 있음

(중요) 작업하기 전 git pull 을 받아서 최신 상태로 만들어 놓고 작업 시작!

(참고로) git pull 명령어는 git fetch + git merge 를 합친것
git fetch 는 원격 저장소의 최신 내용(commit)을 받아오는것
git merge 는 그걸 merge(병합) 하라는 뜻

저장소에 올리지 않을 파일들은 .gitignore
설정 파일이나 빌드 산출물, 기타 라이브러리 파일들은 올리지 않는것이 좋음
.gitignore 파일을 만들어서 올리지 않을 폴더나 파일을 명시하면됨
그러면 git에서 해당 폴더랑 파일을 무시함
